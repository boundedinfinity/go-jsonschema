//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Any change will be overwritten                                                   *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package filetype

import (
	"encoding/json"
	"fmt"
	"strings"
)

type FileType string
type FileTypes []FileType

const (
	Json FileType = "json"
	Yaml FileType = "yaml"
)

var (
	All = FileTypes{
		Json,
		Yaml,
	}
)

func Is(v string) bool {
	return All.Is(v)
}

func Parse(v string) (FileType, error) {
	return All.Parse(v)
}

func Strings() []string {
	return All.Strings()
}

func (t FileType) String() string {
	return string(t)
}

func errFileTypeInvalid(vs FileTypes, v string) error {
	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(vs.Strings(), ","),
	)
}

func (t FileTypes) Strings() []string {
	var ss []string

	for _, v := range t {
		ss = append(ss, v.String())
	}

	return ss
}

func (t FileTypes) Parse(v string) (FileType, error) {
	var o FileType
	var f bool
	n := strings.ToLower(v)

	for _, e := range t {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, errFileTypeInvalid(t, v)
	}

	return o, nil
}

func (t FileTypes) Is(v string) bool {
	var f bool

	for _, e := range t {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func (t FileTypes) Contains(v FileType) bool {
	for _, e := range t {
		if e == v {
			return true
		}
	}

	return false
}

func (t FileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *FileType) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := Parse(s)

	if err != nil {
		return err
	}

	*t = e

	return nil
}
