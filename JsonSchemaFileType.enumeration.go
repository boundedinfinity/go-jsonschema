//************************************************************************************
//*                                                                                  *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package jsonschema

import (
	"encoding/json"
	"fmt"
	"strings"
)

type JsonSchemaFileType string

const (
	JsonSchemaFileType_Json    JsonSchemaFileType = "json"
	JsonSchemaFileType_Unknown JsonSchemaFileType = "unknown"
	JsonSchemaFileType_Yaml    JsonSchemaFileType = "yaml"
)

var (
	JsonSchemaFileTypeList = []JsonSchemaFileType{
		JsonSchemaFileType_Json,
		JsonSchemaFileType_Unknown,
		JsonSchemaFileType_Yaml,
	}
)

func IsJsonSchemaFileType(v string) bool {
	var f bool

	for _, e := range JsonSchemaFileTypeList {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func JsonSchemaFileTypeParse(v string) (JsonSchemaFileType, error) {
	var o JsonSchemaFileType
	var f bool
	n := strings.ToLower(v)

	for _, e := range JsonSchemaFileTypeList {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrJsonSchemaFileTypeNotFound(v)
	}

	return o, nil
}

func JsonSchemaFileTypeListToStrings(vs []JsonSchemaFileType) []string {
	var ss []string

	for _, v := range vs {
		ss = append(ss, v.String())
	}

	return ss
}

func ErrJsonSchemaFileTypeNotFound(v string) error {
	var ss []string

	for _, e := range JsonSchemaFileTypeList {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t JsonSchemaFileType) String() string {
	return string(t)
}

func (t JsonSchemaFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *JsonSchemaFileType) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := JsonSchemaFileTypeParse(s)

	if err != nil {
		return err
	}

	*t = e

	return nil
}
