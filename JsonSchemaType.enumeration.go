//************************************************************************************
//*                                                                                  *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package jsonschema

import (
	"encoding/json"
	"fmt"
	"strings"
)

type JsonSchemaType string

const (
	JsonSchemaType_Array   JsonSchemaType = "array"
	JsonSchemaType_Boolean JsonSchemaType = "boolean"
	JsonSchemaType_Integer JsonSchemaType = "integer"
	JsonSchemaType_Null    JsonSchemaType = "null"
	JsonSchemaType_Number  JsonSchemaType = "number"
	JsonSchemaType_Object  JsonSchemaType = "object"
	JsonSchemaType_String  JsonSchemaType = "string"
)

var (
	JsonSchemaTypeList = []JsonSchemaType{
		JsonSchemaType_Array,
		JsonSchemaType_Boolean,
		JsonSchemaType_Integer,
		JsonSchemaType_Null,
		JsonSchemaType_Number,
		JsonSchemaType_Object,
		JsonSchemaType_String,
	}
)

func IsJsonSchemaType(v string) bool {
	var f bool

	for _, e := range JsonSchemaTypeList {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func JsonSchemaTypeParse(v string) (JsonSchemaType, error) {
	var o JsonSchemaType
	var f bool
	n := strings.ToLower(v)

	for _, e := range JsonSchemaTypeList {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrJsonSchemaTypeNotFound(v)
	}

	return o, nil
}

func JsonSchemaTypeListToStrings(vs []JsonSchemaType) []string {
	var ss []string

	for _, v := range vs {
		ss = append(ss, v.String())
	}

	return ss
}

func ErrJsonSchemaTypeNotFound(v string) error {
	var ss []string

	for _, e := range JsonSchemaTypeList {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t JsonSchemaType) String() string {
	return string(t)
}

func (t JsonSchemaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *JsonSchemaType) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := JsonSchemaTypeParse(s)

	if err != nil {
		return err
	}

	*t = e

	return nil
}
